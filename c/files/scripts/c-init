#! /usr/bin/env sh

## CREATE EMPTY REPOSITORY ON GITHUB
## CREATE GITTER (https://gitter.im/projectname)
## CREATE GITHUB PAGES (settings, https://yourusername.github.io/projectname/)
## EXECUTE WORKON

## Project information
printf -v project_name "%s" $(basename $(cat ~/.working-on))

## Git init
git init .

## Folder setup
mkdir {src,include,lib,tests,docs,bin,m4,scripts,img}
mkdir docs/code
mkdir lib/argtable3
mkdir include/{utils,core}
mkdir include/utils/{misc,data-structures,algorithms}
mkdir src/{utils,core} 
mkdir src/utils/{misc,data-structures,algorithms}

## File setup
### C files
#### Core
m4 -P ~/.p-init/c/files/src/project.c.m4 > "src/${project_name}".c # ✓ cascade m4 and comment header structure

m4 -P ~/.p-init/c/files/include/utils/misc/common.h.m4 > include/utils/misc/common.h # ✓ clean up macro defintions

m4 -P ~/.p-init/c/files/include/utils/misc/status-codes.h.m4 > include/utils/misc/status-codes.h # ✓
m4 -P ~/.p-init/c/files/src/utils/misc/status-codes.c.m4 > src/utils/misc/status-codes.c # ✓ 

m4 -P ~/.p-init/c/files/include/utils/misc/logger.h.m4 > include/utils/misc/logger.h # ✓ 
m4 -P ~/.p-init/c/files/src/utils/misc/logger.c.m4 > src/utils/misc/logger.c # ✓ Function names

m4 -P ~/.p-init/c/files/include/utils/misc/args.h.m4 > include/utils/misc/args.h # ✓ 
m4 -P ~/.p-init/c/files/src/utils/misc/args.c.m4 > src/utils/misc/args.c

cp ~/.p-init/c/files/scripts/Rlinter scripts/.

#### Drop in libraries
wget https://raw.githubusercontent.com/argtable/argtable3/master/argtable3.h > lib/argtable3/argtable3.h
wget https://raw.githubusercontent.com/argtable/argtable3/master/argtable3.c > lib/argtable3/argtable3.c
### Autotools
wget http://git.savannah.gnu.org/gitweb/?p=autoconf-archive.git;a=blob_plain;f=m4/ax_check_compile_flag.m4 > m4/ax_check_compile_flag.m4
wget http://git.savannah.gnu.org/gitweb/?p=autoconf-archive.git;a=blob_plain;f=m4/ax_append_flag.m4 > m4/ax_append_flag.m4
m4 -P ~/.p-init/c/files/configure.ac.m4 > configure.ac
m4 -P ~/.p-init/c/files/Makefile.am.m4 > Makefile.am
### Sphinx
pushd docs/
sphinx-quickstart
popd

mkdir "docs/source/"{design,guide,api}

m4 -P '~/.p-init/c/files/docs/source/main-index.rst.m4' > 'docs/source/main-index.rst.m4'
m4 -P '~/.p-init/c/files/docs/source/design/design-index.rst.m4' > 'docs/source/design/design-index.rst.m4'
m4 -P '~/.p-init/c/files/docs/source/guide/guide-index.rst.m4' > 'docs/source/guide/guide-index.rst.m4'
m4 -P '~/.p-init/c/files/docs/source/api/api-index.rst.m4' > 'docs/source/api/api-index.rst.m4'

### Travis CI
# We run unit tests ourselves before commiting. The CI server then runs these tests against a clean build of the entire project
# This step should be done when we have a project specific component
cp ~/.p-init/c/travis_ci/.travis.yml . 

### General
m4 -P ~/.p-init/c/git/LICENSE.md.m4 > LICENSE.md
cp ~/.p-init/c/git/LICENSE-docs.md > LICENSE-docs.md
m4 -P ~/.p-init/c/git/README.md.m4 > README.md # investigate git pages
m4 -P ~/.p-init/c/git/AUTHORS.md.m4 > AUTHORS.md # investigate practical usage of gpg keys
m4 -P ~/.p-init/c/git/CONTRIBUTING.md.m4 > CONTRIBUTING.md
m4 -P ~/.p-init/c/git/index.md.m4 > index.md # for github pages site
m4 -P ~/.p-init/c/git/_config.yml.m4 >> _config.yml # for github pages jekyll theme

### Git ignore
cp ~/.p-init/c/git/.gitignore . 
