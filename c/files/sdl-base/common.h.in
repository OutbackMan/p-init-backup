/*******************************************************************************

Copyright (C) 2018, @GAME_CREATOR@

@CONFIGURE_FILE_NAME@: 
	"Common macro definitions."

GAME:
	"Cross platform 2D SDL game."

License:
	"This file is subject to the terms and conditions defined in
	'LICENSE.md', which is part of this source code package."

*******************************************************************************/

#ifndef __common_h__
#define __common_h__

#include <stdbool.h>

/******************************************************************************
 * UTILITY MACROS
 *****************************************************************************/

#define GAME_TO_STRING(val)	#val
#define GAME_STRINGIFY(str)	GAME_TO_STRING(str)

#define GAME_LEAVE(func_exit_code) \
	do { \
		exit_code = func_exit_code; \
		goto __exit; \
	} while (0);

/******************************************************************************
 * COMPILER VERSION DETECTION 
 *****************************************************************************/

#if defined(__GNUC__)
#define GAME_COMPILER "gcc-"GAME_STRINGIFY(__GNUC__)"." \
	GAME_STRINGIFY(__GNUC_MINOR__)"." \
	GAME_STRINGIFY(__GNUC_PATCHLEVEL__)
#elif defined(__llvm__)
#define GAME_COMPILER "llvm-"GAME_STRINGIFY(__clang_major__)"." \
		GAME_STRINGIFY(__clang_minor__)"." \
		GAME_STRINGIFY(__clang_patchlevel__)
#elif defined(_MSC_VER)
// check what versions appveyor supports
#if _MSC_VER <= 1200
#define GAME_COMPILER "MSVC 6.0"
#elif _MSC_VER <= 1300
#define GAME_COMPILER "MSVC 7.0"
#elif _MSC_VER <= 1310
#define GAME_COMPILER "MSVC 7.1"
#elif _MSC_VER <= 1400
#define GAME_COMPILER "MSVC 8.0"
#elif _MSC_VER <= 1500
#define GAME_COMPILER "MSVC 9.0"
#elif _MSC_VER <= 1600
#define GAME_COMPILER "MSVC 2010"
#elif _MSC_VER <= 1700
#define GAME_COMPILER "MSVC 2012"
#elif _MSC_VER <= 1800
#define GAME_COMPILER "MSVC 2013"
#elif _MSC_VER <= 1900
#define GAME_COMPILER "MSVC 2015"
#elif _MSC_VER <= 1912
#define GAME_COMPILER "MSVC 2017"
#elif defined(__EMSCRIPTEN__)
#define GAME_COMPILER "emscripten-"GAME_STRINGIFY(__EMSCRIPTEN_major__)"." \
	GAME_STRINGIFY(__EMSCRIPTEN_minor__)"." \
	GAME_STRINGIFY(__EMSCRIPTEN_tiny__)
#elif defined(__MINGW32__)
#define GAME_COMPILER "mingw32-"GAME_STRINGIFY(__MINGW32_MAJOR_VERSION__)"." \
	GAME_STRINGIFY(__MINGW32_MINOR_VERSION__)
#elif defined(__MINGW64__)
#define GAME_COMPILER "mingw64-"GAME_STRINGIFY(__MINGW64_MAJOR_VERSION__)"." \
	GAME_STRINGIFY(__MINGW64_MINOR_VERSION__)
#else
#define GAME_COMPILER "Unknown"
#endif
// appveyor for mingw, msys

/******************************************************************************
 * COMPILER EXTENSIONS
 *****************************************************************************/
#if defined(__GNUC__) || defined(__llvm__) 
#include <x86initrn.h> // for __rdtsc()
#define GAME_ALIGN
#define GAME_PURE __attribute__((pure))
#define GAME_CONST __attribute__((const))
#define GAME_COLD __attribute__((cold))
#define GAME_HOT __attribute__((hot))
#define GAME_CHECK __attribute__((warn_unused_result))
#define GAME_DEPRECATED __attribute__((deprecated))
#define GAME_USED __attribute__((used))
#define GAME_UNUSED __attribute__((unused))
#define GAME_PACKED __attribute__((packed))
#define GAME_LIKELY(val) __builtin_expect(!!(val), 1)
#define GAME_UNLIKELY(val) __builtin_expect(!!(val), 0)
#define GAME_DESIGNATED __attribute__((designated_init))
#define GAME_FLATTEN __attribute__((flatten))
#elif defined (_MSC_VER)
#define _CRT_SECURE_NO_WARNINGS
#define inline __inline
#define restrict __restrict
#define GAME_ALIGN
#define GAME_DEPRECATED
#else
#define GAME_ALIGN
#define GAME_DEPRECATED
#endif

/******************************************************************************
 * DEBUG ONLY DEFINITIONS
 *****************************************************************************/

#if defined(GAME_IN_DEBUG_MODE)
static inline bool GAME_ASSERT_IF(const bool condition)
{
	return !condition;	
}

static inline bool GAME_IMPLIES(const bool truth, const bool implication)
{
	return (!truth || implication);	
}
#else
static inline bool GAME_ASSERT_IF(const bool condition) {
	;	
}
static inline bool GAME_IMPLIES(const bool truth, const bool implication)
{
	;
}
#endif

/******************************************************************************
 * UTILITY FUNCTIONS
 *****************************************************************************/

static inline int GAME_INT_MAX(const int x, const int y)
{
	return (x > y ? x : y);
}

/******************************************************************************
 * CMAKE DEFINITIONS
 *****************************************************************************/

#cmakedefine GAME_VERSION "@GAME_VERSION@"
#cmakedefine GAME_BUGREPORT_ADDRESS "@GAME_BUGREPORT_ADDRESS@"
#cmakedefine GAME_NAME "@GAME_NAME@"
#cmakedefine GAME_AUTHOR "@GAME_CREATOR@"
#cmakedefine GAME_ARCH "@GAME_ARCH@"
#cmakedefine GAME_ARCH_SUPPORT "@GAME_ARCH_SUPPORT@"

#endif
